{% extends "forms/field.html.twig" %}

{% set config = grav.config %}
{% set site_key = field.recaptcha_site_key and field.recaptcha_site_key != 'ENTER_YOUR_CAPTCHA_SITE_KEY' ? field.recaptcha_site_key : config.plugins.form.recaptcha.site_key %}
{% set action = (page.route|trim('/') ~ '-' ~ form.name)|underscorize %}
{% set formName = form.name|underscorize %}
{% set theme = config.plugins.form.recaptcha.theme ?? 'light' %}

{% block label %}{% endblock %}

{% block input %}
    {% set form_id = formName %}
    {% if not site_key %}
        <script type="application/javascript">console && console.error('site_key was not defined for form "{{ form.name }}" (Grav Form Plugin)')</script>
    {% elseif config.plugins.form.recaptcha.version == 3 %}
        {% do assets.addJs('https://www.google.com/recaptcha/api.js?render='~site_key~'&theme=' ~ theme) %}
        <script type="application/javascript">
            window.gRecaptchaInstances = window.gRecaptchaInstances || {};
            window.gRecaptchaInstances['{{ form_id }}'] = {
                element: document.querySelector('form#{{ form_id }}'),
                submit: function (event) {
                    event.preventDefault();
                    grecaptcha.ready(function () {
                        grecaptcha.execute('{{ site_key }}', {action: '{{ action }}'}).then(function (token) {
                            // Always add token input for v3
                            var tokenElement = document.createElement('input');
                            tokenElement.setAttribute('type', 'hidden');
                            tokenElement.setAttribute('name', 'data[token]');
                            tokenElement.setAttribute('value', token);

                            var actionElement = document.createElement('input');
                            actionElement.setAttribute('type', 'hidden');
                            actionElement.setAttribute('name', 'data[action]');
                            actionElement.setAttribute('value', '{{ action }}');

                            const form = window.gRecaptchaInstances['{{ form_id }}'].element;
                            const submit = window.gRecaptchaInstances['{{ form_id }}'].submit;
                            form.insertBefore(tokenElement, form.firstChild);
                            form.insertBefore(actionElement, form.firstChild);

                            // Check for XHR submission
                            if (form.dataset.hasOwnProperty('xhrSubmit')) {
                                submitFormViaAjax(form, token);
                            } else {
                                form.removeEventListener('submit', submit);
                                form.submit();
                            }
                        });
                    });
                }
            };

            window.gRecaptchaInstances['{{ form_id }}'].element.addEventListener('submit', window.gRecaptchaInstances['{{ form_id }}'].submit);
        </script>
    {% elseif config.plugins.form.recaptcha.version == '2-invisible' %}
        <script type="application/javascript">
            function captchaOnloadCallback_{{ formName }}_{{ form_id }}() {
                var form = document.querySelector('form#{{ form_id }}');
                var submits = form.querySelectorAll('[type="submit"]') || [];
                submits.forEach(function (submit) {
                    submit.addEventListener('click', function (event) {
                        event.preventDefault();
                        var captchaElement = form.querySelector('#g-recaptcha-{{ formName }}-{{ form_id }}');

                        if (captchaElement) {
                            captchaElement.remove();
                        }

                        captchaElement = document.createElement('div');
                        captchaElement.setAttribute('id', 'g-recaptcha-{{ formName }}-{{ form_id }}');
                        form.appendChild(captchaElement);

                        form.submitRecaptchaForm = function () {
                            var widgetReference = grecaptcha.render('g-recaptcha-{{ formName }}-{{ form_id }}', {
                                sitekey: '{{ site_key }}', size: 'invisible',
                                callback: function (token) {
                                    // Check for XHR submission for this form
                                    if (form.dataset.hasOwnProperty('xhrSubmit')) {
                                        submitFormViaAjax(form, token);
                                    } else {
                                        form.submit();
                                    }
                                }
                            });
                            grecaptcha.execute(widgetReference);
                        }
                    });
                });
            }
        </script>

        <script src="https://www.google.com/recaptcha/api.js?onload=captchaOnloadCallback_{{ formName }}_{{ form_id }}&hl={{ grav.language.language }}&theme={{ theme }}"
                async defer></script>
    {% else %}
        <script type="application/javascript">
            function captchaOnloadCallback_{{ formName }}_{{ form_id }}() {
                window['submitRecaptchaForm' + '{{ form_id }}'] = function() {
                    grecaptcha.render('g-recaptcha-{{ formName }}-{{ form_id }}', {
                        'sitekey': "{{ site_key }}",
                        'callback': 'captchaValidatedCallback_{{ formName }}_{{ form_id }}',
                        'expired-callback': 'captchaExpiredCallback_{{ formName }}_{{ form_id }}'
                    });
                }
            };

            function captchaValidatedCallback_{{ formName }}_{{ form_id }}(token) {
                // Check for XHR submission for this form
                var form = document.getElementById('{{ form_id }}');
                if (form.dataset.hasOwnProperty('xhrSubmit')) {
                    submitFormViaAjax(form, token);
                } else {
                    form.submit();
                }
            };

            function captchaExpiredCallback_{{ formName }}_{{ form_id }}() {
                grecaptcha.reset(window['captchaWidget' + '{{ form_id }}']);
            };
        </script>
        <script src="https://www.google.com/recaptcha/api.js?onload=captchaOnloadCallback_{{ formName }}_{{ form_id }}&render=explicit&hl={{ grav.language.language }}&theme={{ theme }} "
                async defer></script>
        <div class="g-recaptcha" id="g-recaptcha-{{ formName }}-{{ form_id }}" data-theme="{{ theme }}"></div>
    {% endif %}
{% endblock %}
